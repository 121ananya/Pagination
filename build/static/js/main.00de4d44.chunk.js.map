{"version":3,"sources":["helpers/data.js","store/index.js","App.js","index.js"],"names":["random","arr","Math","floor","length","generate","count","data","i","currentColor","currentSize","currentType","currentDesigner","currentPrice","toFixed","push","name","color","size","designer","type","price","salesPrice","initialState","appliedFilters","loadNewPage","payload","filterStore","state","action","sortByAlphabetState","Object","assign","sortedAlphabetArr","direction","sortAsc","filteredProducts","sortDesc","addFilterIfNotExists","removeFilter","sortByPriceState","sortedPriceArr","newState","value","filteredValues","products","filter","product","toLowerCase","includes","filteredCount","filteredPages","ceil","countPerPage","totalPages","slice","currentCount","totalCount","currentPage","loadNewPageState","addPages","page","nextProducts","perPage","upperCount","lowerCount","window","history","pushState","exactPageState","exactPage","upperCountExact","lowerCountExact","exactProducts","field","sort","a","b","indexOf","index","splice","App","URLSearchParams","location","search","get","this","props","dispatch","e","input","target","endsWith","startsWith","sortByAlphabet","className","role","aria-label","onClick","previousPage","nextPage","Array","map","goToPage","aria-current","style","alignItems","onChange","sortByInput","disabled","selected","minWidth","filterByInput","width","placeholder","flexWrap","Component","connect","store","createStore","reducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00de4d44.chunk.js","sourcesContent":["const random = (arr) => {\n    return arr[Math.floor(Math.random() * arr.length)];\n};\n\nconst exp = () => {\n    return random(['1 year', '2 year', '2.5 year', '10 year', '11 year']);\n};\n\nconst city = () => {\n    return random(['Delhi', 'Mumbai', 'Chennai']);\n};\n\nconst designer = () => {\n    return random([\n        'Anwesha Sinha',\n        'Asfa Sah',\n        'Vivek',\n        'Aishwarya Roy',\n        'Anjali Kumari',\n        'Bhawna Milinda',\n        'Kunika Verma',\n        'Riddhi Dutta',\n        'Akshat Jha',\n        'Ruhi Chawla'\n    ]);\n};\n\nconst skill = () => {\n    return random([\n        'JavaScript',\n        'PHP',\n        'GO',\n        'MERN Stack',\n        'GraphQl',\n        'NodeJs'\n    ]);\n};\n\nconst salary = () => {\n    return (Math.random() * 1000).toFixed(2);\n};\n\nfunction generate(count) {\n    const data = [];\n    for(let i = 0; i < count; i++) {\n        const currentColor = city();\n        const currentSize = exp();\n        const currentType = skill();\n        const currentDesigner = designer();\n        const currentPrice = salary();\n\n        data.push({\n            name: `${currentDesigner} ${currentType} ${currentColor} ${currentSize}`,\n            color: currentColor,\n            size: currentSize,\n            designer: currentDesigner,\n            type: currentType,\n            price: currentPrice,\n            salesPrice: currentPrice * .8\n        });\n    }\n    return data;\n}\n\nexport default generate;\n","import generate from \"../helpers/data\";\nconst initialState = {\n    appliedFilters: []\n};\n\nconst SORT_BY_ALPHABET = \"SORT_BY_ALPHABET\";\nconst SORT_BY_PRICE = \"SORT_BY_PRICE\";\nconst LOAD_DATA = \"LOAD_DATA\";\nconst FILTER_BY_PRICE = \"FILTER_BY_PRICE\";\nconst FILTER_BY_VALUE = \"FILTER_BY_VALUE\";\nconst LOAD_NEW_PAGE = \"LOAD_NEW_PAGE\";\nconst LOAD_EXACT_PAGE = \"LOAD_EXACT_PAGE\";\n\nexport const sortByPrice = payload => ({\n    type: SORT_BY_PRICE,\n    payload\n});\n\nexport const filterByPrice = payload => ({\n    type: FILTER_BY_PRICE,\n    payload\n});\n\nexport const filterByValue = payload => ({\n    type: FILTER_BY_VALUE,\n    payload\n});\n\nexport const sortByAlphabet = payload => ({\n    type: SORT_BY_ALPHABET,\n    payload\n});\n\nexport const loadData = (payload) => ({\n    type: LOAD_DATA,\n    payload\n});\n\nexport const loadNewPage = (payload) => ({\n    type: LOAD_NEW_PAGE,\n    payload\n});\n\nexport const loadExactPage = (payload) => ({\n    type: LOAD_EXACT_PAGE,\n    payload\n});\n\nconst filterStore = (state = initialState, action) => {\n    switch (action.type) {\n            case SORT_BY_ALPHABET:\n                const sortByAlphabetState = Object.assign({}, state);\n                let sortedAlphabetArr = action.payload.direction === \"asc\" ?\n                    sortAsc(state.filteredProducts, 'name') :\n                    sortDesc(state.filteredProducts, 'name');\n\n                sortByAlphabetState.filteredProducts = sortedAlphabetArr;\n                sortByAlphabetState.appliedFilters = addFilterIfNotExists(SORT_BY_ALPHABET, sortByAlphabetState.appliedFilters);\n                sortByAlphabetState.appliedFilters = removeFilter(SORT_BY_ALPHABET, sortByAlphabetState.appliedFilters);\n\n                return sortByAlphabetState;\n        case SORT_BY_PRICE:\n            let sortByPriceState = Object.assign({}, state);\n            let sortedPriceArr = action.payload.direction === \"asc\" ?\n                sortAsc(state.filteredProducts, 'price') :\n                sortDesc(state.filteredProducts, 'price');\n\n            sortByPriceState.filteredProducts = sortedPriceArr;\n            sortByPriceState.appliedFilters = addFilterIfNotExists(SORT_BY_ALPHABET, sortByPriceState.appliedFilters);\n            sortByPriceState.appliedFilters = removeFilter(SORT_BY_PRICE, sortByPriceState.appliedFilters);\n\n            return sortByPriceState;\n        case FILTER_BY_PRICE:\n            //filter by price\n            return state;\n        case FILTER_BY_VALUE:\n            let newState = Object.assign({}, state);\n            let value = action.payload.value;\n            let filteredValues = state.products.filter(product => {\n                return product.name.toLowerCase().includes(value) ||\n                    product.designer.toLowerCase().includes(value);\n            });\n\n            let appliedFilters = state.appliedFilters;\n\n            if (value) {\n                appliedFilters = addFilterIfNotExists(FILTER_BY_VALUE, appliedFilters);\n\n                newState.filteredProducts = filteredValues;\n                newState.filteredCount = newState.filteredProducts.length;\n                newState.filteredPages = Math.ceil(newState.filteredCount / newState.countPerPage);\n\n            } else {\n                appliedFilters = removeFilter(FILTER_BY_VALUE, appliedFilters);\n\n                if (appliedFilters.length === 0) {\n                    newState.filteredProducts = newState.products;\n                    newState.filteredCount = newState.filteredProducts.length;\n                    newState.filteredPages = Math.ceil(newState.filteredCount / newState.countPerPage);\n                }\n            }\n            return newState;\n        case LOAD_DATA:\n            let count = action.payload.count;\n            let countPerPage = action.payload.countPerPage || 20;\n\n            //round up\n            let totalPages = Math.ceil(count / countPerPage);\n\n            let products = generate(count);\n            return {\n                ...state,\n                products,\n                filteredProducts: products.slice(0, countPerPage),\n                currentCount: countPerPage,\n                countPerPage,\n                totalCount: count,\n                currentPage: 1,\n                totalPages: totalPages,\n                filteredPages: totalPages\n            };\n        case LOAD_NEW_PAGE:\n            //Clone the previous state\n            let loadNewPageState = Object.assign({}, state);\n            //How many pages should be added. Will always be 1 or -1\n            let addPages = action.payload.page;\n            //add it to the current\n            loadNewPageState.currentPage += addPages;\n\n            let perPage = loadNewPageState.countPerPage; //20 by default\n\n            let nextProducts;\n            if (addPages === 1){\n                //Moving from page 1 to 2 will cause ‘upperCount’ to be 40\n                let upperCount = loadNewPageState.currentCount + perPage;\n                let lowerCount = loadNewPageState.currentCount; //This hasn’t been changed. It will remain 20.\n\n                loadNewPageState.currentCount += loadNewPageState.countPerPage;\n                nextProducts = loadNewPageState.products.slice(lowerCount, upperCount);\n            }\n\n            if (addPages ===-1){\n                let upperCount = loadNewPageState.currentCount; //40\n                let lowerCount = loadNewPageState.currentCount - perPage; //20\n\n                loadNewPageState.currentCount -= loadNewPageState.countPerPage;\n                nextProducts = loadNewPageState.products.slice(lowerCount - perPage, upperCount - perPage);\n            }\n\n            loadNewPageState.filteredProducts = nextProducts;\n            // Don't use window.history.pushState() here in production\n            // It's better to keep redirections predictable\n            window.history.pushState({page: 1}, \"title 1\", `?page=${loadNewPageState.currentPage}`);\n            return loadNewPageState;\n        case LOAD_EXACT_PAGE:\n            const exactPageState = Object.assign({}, state);\n            const exactPage = action.payload.page;\n            let upperCountExact = exactPageState.countPerPage * exactPage;\n            let lowerCountExact = upperCountExact - exactPageState.countPerPage;\n\n            let exactProducts = exactPageState.products.slice(lowerCountExact, upperCountExact);\n            exactPageState.filteredProducts = exactProducts;\n            exactPageState.currentCount = upperCountExact;\n            exactPageState.currentPage = exactPage;\n            window.history.pushState({page: 1}, \"title 1\", `?page=${exactPageState.currentPage}`);\n\n            return exactPageState;\n\n        default:\n            return state;\n\n    }\n};\n\nexport default filterStore;\n\nfunction sortAsc(arr, field) {\n    return arr.sort(function (a, b) {\n        if (a[field] > b[field]) return 1;\n\n        if (b[field]> a[field]) return -1;\n\n        return 0;\n    })\n}\n\nfunction sortDesc(arr, field) {\n    return arr.sort(function (a, b) {\n        if (a[field] > b[field]) return -1;\n\n        if (b[field]> a[field]) return 1;\n\n        return 0;\n    })\n}\n\nfunction addFilterIfNotExists(filter, appliedFilters) {\n    let index = appliedFilters.indexOf(filter);\n    if (index===-1) appliedFilters.push(filter);\n\n    return appliedFilters;\n}\n\nfunction removeFilter(filter, appliedFilters) {\n    let index = appliedFilters.indexOf(filter);\n    appliedFilters.splice(index, 1);\n    return appliedFilters;\n}\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {filterByValue, loadData, loadExactPage, loadNewPage, sortByAlphabet, sortByPrice} from \"./store\";\n\nclass App extends Component {\n\n    componentDidMount() {\n        const params = new URLSearchParams(window.location.search);\n        const pageQueryParam = params.get('page');\n        if (!pageQueryParam) {\n            window.history.pushState({page: 1}, \"title 1\", \"?page=1\");\n        } else {\n\n        }\n        this.props.dispatch(loadData({count: 40}));\n    }\n\n    filterByInput(e){\n        let input = e.target.value;\n        this.props.dispatch(filterByValue({value: input}))\n    }\n\n    nextPage() {\n        this.props.dispatch(loadNewPage({page: 1}))\n    }\n\n    previousPage() {\n        this.props.dispatch(loadNewPage({page: -1}));\n    }\n\n    goToPage(page) {\n        this.props.dispatch(loadExactPage({page}))\n    }\n\n    sortByInput(e){\n        let value = e.target.value;\n        let direction = value.endsWith('asc') ? \"asc\" : \"desc\";\n\n        if (value.startsWith('price')){\n            this.props.dispatch(sortByPrice({direction}))\n        }else {\n            this.props.dispatch(sortByAlphabet({direction}));\n        }\n    }\n\n    render() {\n        let products = this.props.state.filteredProducts;\n        return (\n            <div className=\"App\">\n                <section className=\"hero\">\n                    <div className=\"hero-body\">\n                        <div className=\"container\">\n                            <h1 className=\"title\">\n                            Assignment To Demonstrate\n                            </h1>\n                            <h2 className=\"subtitle\">\n                              Searching, Filtering, Ranking\n                            </h2>\n                        </div>\n                    </div>\n                </section>\n                <section className='section'>\n                    <div className='container'>\n                        <nav className=\"pagination\" role=\"navigation\" aria-label=\"pagination\">\n                            <button className=\"button pagination-previous\" onClick={() => {\n                                this.previousPage()\n                            }}>Previous\n                            </button>\n                            <button className=\"button pagination-next\" onClick={() => {\n                                this.nextPage()\n                            }}>Next page\n                            </button>\n                            <ul className=\"pagination-list\">\n                                {\n                                    [...Array(this.props.state.filteredPages)].map((value, index) => (\n                                        <button\n                                            className={`button pagination-link ${this.props.state.currentPage === index + 1 ? \"is-current\" : \"\"}`}\n                                            aria-label=\"Page 1\"\n                                            onClick={() => this.goToPage(index + 1)}\n                                            aria-current=\"page\">\n                                            {index + 1}\n                                        </button>\n                                    ))\n                                }\n                            </ul>\n                        </nav>\n\n                    </div>\n                </section>\n                <section className='section'>\n                    <div className='container'>\n                        <div>\n                            <div className=\"field is-grouped\" style={{alignItems: \"center\"}}>\n                                <div className=\"control\">\n                                    <div className=\"select\">\n                                        <select onChange={e => {\n                                            this.sortByInput(e)\n                                        }}>\n                                            <option value=\"\" disabled selected>Sort by</option>\n\n                                            <option value='alphabet_asc'>Name - A-Z</option>\n                                            <option value='alphabet_desc'>Name - Z-A</option>\n\n                                            <option value='price_asc'>Price - Lowest to Highest</option>\n                                            <option value='price_desc'>Price - Highest to Lowest</option>\n\n                                        </select>\n                                    </div>\n                                </div>\n\n                                <div className='control' style={{minWidth: \"300px\"}}>\n                                    <input onChange={e => {\n                                        this.filterByInput(e);\n                                    }} style={{width: \"100%\"}} placeholder='Filter by' type='text'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='tile is-ancestor' style={{flexWrap: \"wrap\"}}>\n                            {\n                                products && products.length && products.map(product => (\n                                    <div className='tile is-parent is-3'>\n                                        <div className='tile is-child box'>\n                                            <p>\n                                                <b>Intro: </b>\n                                                {product.name}\n                                            </p>\n                                            <p>\n                                                <b>Name: </b>\n                                                {product.designer}\n                                            </p>\n                                            <p>\n                                                <b>Skills: </b>\n                                                {product.type}\n                                            </p>\n                                            <p>\n                                                <b>Salary: </b>\n                                                ${product.price}\n                                            </p>\n                                        </div>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n                </section>\n            </div>\n\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {state};\n}\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport reducers from \"./store\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(<Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}